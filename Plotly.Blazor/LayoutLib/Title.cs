/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib.TitleLib;

namespace Plotly.Blazor.LayoutLib
{
    /// <summary>
    ///     The Title class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Title 
    {
        /// <summary>
        ///     Sets the plot's title. Note that before the existence of `title.text`, the
        ///     title's contents used to be defined as the `title` attribute itself. This
        ///     behavior has been deprecated.
        /// </summary>
        [JsonPropertyName(@"text")]
        public string Text { get; set;} 

        /// <summary>
        ///     Sets the title font. Note that the title's font used to be customized by
        ///     the now deprecated `titlefont` attribute.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Font Font { get; set;} 

        /// <summary>
        ///     Sets the container `x` refers to. *container* spans the entire `width` of
        ///     the plot. *paper* refers to the width of the plotting area only.
        /// </summary>
        [JsonPropertyName(@"xref")]
        public XrefEnum? Xref { get; set;} 

        /// <summary>
        ///     Sets the container `y` refers to. *container* spans the entire `height`
        ///     of the plot. *paper* refers to the height of the plotting area only.
        /// </summary>
        [JsonPropertyName(@"yref")]
        public YRefEnum? YRef { get; set;} 

        /// <summary>
        ///     Sets the x position with respect to `xref` in normalized coordinates from
        ///     *0* (left) to *1* (right).
        /// </summary>
        [JsonPropertyName(@"x")]
        public float? X { get; set;} 

        /// <summary>
        ///     Sets the y position with respect to `yref` in normalized coordinates from
        ///     *0* (bottom) to *1* (top). *auto* places the baseline of the title onto
        ///     the vertical center of the top margin.
        /// </summary>
        [JsonPropertyName(@"y")]
        public float? Y { get; set;} 

        /// <summary>
        ///     Sets the title's horizontal alignment with respect to its x position. *left*
        ///     means that the title starts at x, *right* means that the title ends at x
        ///     and *center* means that the title's center is at x. *auto* divides `xref`
        ///     by three and calculates the `xanchor` value automatically based on the value
        ///     of `x`.
        /// </summary>
        [JsonPropertyName(@"xanchor")]
        public XAnchorEnum? XAnchor { get; set;} 

        /// <summary>
        ///     Sets the title's vertical alignment with respect to its y position. *top*
        ///     means that the title's cap line is at y, *bottom* means that the title's
        ///     baseline is at y and *middle* means that the title's midline is at y. *auto*
        ///     divides `yref` by three and calculates the `yanchor` value automatically
        ///     based on the value of `y`.
        /// </summary>
        [JsonPropertyName(@"yanchor")]
        public YAnchorEnum? YAnchor { get; set;} 

        /// <summary>
        ///     Sets the padding of the title. Each padding value only applies when the
        ///     corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left
        ///     padding to take effect, `xanchor` must be set to *left*. The same rule applies
        ///     if `xanchor`/`yanchor` is determined automatically. Padding is muted if
        ///     the respective anchor value is *middle*/*center*.
        /// </summary>
        [JsonPropertyName(@"pad")]
        public Pad Pad { get; set;} 

    }
}