/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib;

namespace Plotly.Blazor.LayoutLib.MapBoxLib
{
    /// <summary>
    ///     The Layer class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Layer 
    {
        /// <summary>
        ///     Determines whether this layer is displayed
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <summary>
        ///     Sets the source type for this layer, that is the type of the layer data.
        /// </summary>
        [JsonPropertyName(@"sourcetype")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.SourceTypeEnum? SourceType { get; set;} 

        /// <summary>
        ///     Sets the source data for this layer (mapbox.layer.source). When `sourcetype`
        ///     is set to *geojson*, `source` can be a URL to a GeoJSON or a GeoJSON object.
        ///     When `sourcetype` is set to *vector* or *raster*, `source` can be a URL
        ///     or an array of tile URLs. When `sourcetype` is set to *image*, `source`
        ///     can be a URL to an image.
        /// </summary>
        [JsonPropertyName(@"source")]
        public object Source { get; set;} 

        /// <summary>
        ///     Specifies the layer to use from a vector tile source (mapbox.layer.source-layer).
        ///     Required for *vector* source type that supports multiple layers.
        /// </summary>
        [JsonPropertyName(@"sourcelayer")]
        public string SourceLayer { get; set;} 

        /// <summary>
        ///     Sets the attribution for this source.
        /// </summary>
        [JsonPropertyName(@"sourceattribution")]
        public string SourceAttribution { get; set;} 

        /// <summary>
        ///     Sets the layer type, that is the how the layer data set in `source` will
        ///     be rendered With `sourcetype` set to *geojson*, the following values are
        ///     allowed: *circle*, *line*, *fill* and *symbol*. but note that *line* and
        ///     *fill* are not compatible with Point GeoJSON geometries. With `sourcetype`
        ///     set to *vector*, the following values are allowed:  *circle*, *line*, *fill*
        ///     and *symbol*. With `sourcetype` set to *raster* or `*image*`, only the *raster*
        ///     value is allowed.
        /// </summary>
        [JsonPropertyName(@"type")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.TypeEnum? Type { get; set;} 

        /// <summary>
        ///     Sets the coordinates array contains [longitude, latitude] pairs for the
        ///     image corners listed in clockwise order: top left, top right, bottom right,
        ///     bottom left. Only has an effect for *image* `sourcetype`.
        /// </summary>
        [JsonPropertyName(@"coordinates")]
        public object Coordinates { get; set;} 

        /// <summary>
        ///     Determines if the layer will be inserted before the layer with the specified
        ///     ID. If omitted or set to '', the layer will be inserted above every existing
        ///     layer.
        /// </summary>
        [JsonPropertyName(@"below")]
        public string Below { get; set;} 

        /// <summary>
        ///     Sets the primary layer color. If `type` is *circle*, color corresponds to
        ///     the circle color (mapbox.layer.paint.circle-color) If `type` is *line*,
        ///     color corresponds to the line color (mapbox.layer.paint.line-color) If `type`
        ///     is *fill*, color corresponds to the fill color (mapbox.layer.paint.fill-color)
        ///     If `type` is *symbol*, color corresponds to the icon color (mapbox.layer.paint.icon-color)
        /// </summary>
        [JsonPropertyName(@"color")]
        public object Color { get; set;} 

        /// <summary>
        ///     Sets the opacity of the layer. If `type` is *circle*, opacity corresponds
        ///     to the circle opacity (mapbox.layer.paint.circle-opacity) If `type` is *line*,
        ///     opacity corresponds to the line opacity (mapbox.layer.paint.line-opacity)
        ///     If `type` is *fill*, opacity corresponds to the fill opacity (mapbox.layer.paint.fill-opacity)
        ///     If `type` is *symbol*, opacity corresponds to the icon/text opacity (mapbox.layer.paint.text-opacity)
        /// </summary>
        [JsonPropertyName(@"opacity")]
        public float? Opacity { get; set;} 

        /// <summary>
        ///     Sets the minimum zoom level (mapbox.layer.minzoom). At zoom levels less
        ///     than the minzoom, the layer will be hidden.
        /// </summary>
        [JsonPropertyName(@"minzoom")]
        public float? MinZoom { get; set;} 

        /// <summary>
        ///     Sets the maximum zoom level (mapbox.layer.maxzoom). At zoom levels equal
        ///     to or greater than the maxzoom, the layer will be hidden.
        /// </summary>
        [JsonPropertyName(@"maxzoom")]
        public float? MaxZoom { get; set;} 

        /// <summary>
        ///     Gets or sets the Circle.
        /// </summary>
        [JsonPropertyName(@"circle")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.Circle Circle { get; set;} 

        /// <summary>
        ///     Gets or sets the Line.
        /// </summary>
        [JsonPropertyName(@"line")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.Line Line { get; set;} 

        /// <summary>
        ///     Gets or sets the Fill.
        /// </summary>
        [JsonPropertyName(@"fill")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.Fill Fill { get; set;} 

        /// <summary>
        ///     Gets or sets the Symbol.
        /// </summary>
        [JsonPropertyName(@"symbol")]
        public Plotly.Blazor.LayoutLib.MapBoxLib.LayerLib.Symbol Symbol { get; set;} 

        /// <summary>
        ///     When used in a template, named items are created in the output figure in
        ///     addition to any items the figure already has in this array. You can modify
        ///     these items in the output figure by making your own item with `templateitemname`
        ///     matching this `name` alongside your modifications (including `visible: false`
        ///     or `enabled: false` to hide it). Has no effect outside of a template.
        /// </summary>
        [JsonPropertyName(@"name")]
        public string Name { get; set;} 

        /// <summary>
        ///     Used to refer to a named item in this array in the template. Named items
        ///     from the template will be created even without a matching item in the input
        ///     figure, but you can modify one by making an item with `templateitemname`
        ///     matching its `name`, alongside your modifications (including `visible: false`
        ///     or `enabled: false` to hide it). If there is no template or no matching
        ///     item, this item will be hidden unless you explicitly show it with `visible:
        ///     true`.
        /// </summary>
        [JsonPropertyName(@"templateitemname")]
        public string TemplateItemName { get; set;} 

    }
}