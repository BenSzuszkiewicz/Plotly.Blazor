/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib.LegendLib;

namespace Plotly.Blazor.LayoutLib
{
    /// <summary>
    ///     The Legend class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Legend 
    {
        /// <summary>
        ///     Sets the legend background color. Defaults to `layout.paper_bgcolor`.
        /// </summary>
        [JsonPropertyName(@"bgcolor")]
        public object BgColor { get; set;} 

        /// <summary>
        ///     Sets the color of the border enclosing the legend.
        /// </summary>
        [JsonPropertyName(@"bordercolor")]
        public object BorderColor { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the border enclosing the legend.
        /// </summary>
        [JsonPropertyName(@"borderwidth")]
        public float? BorderWidth { get; set;} 

        /// <summary>
        ///     Sets the font used to text the legend items.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Font Font { get; set;} 

        /// <summary>
        ///     Sets the orientation of the legend.
        /// </summary>
        [JsonPropertyName(@"orientation")]
        public OrientationEnum? Orientation { get; set;} 

        /// <summary>
        ///     Determines the order at which the legend items are displayed. If *normal*,
        ///     the items are displayed top-to-bottom in the same order as the input data.
        ///     If *reversed*, the items are displayed in the opposite order as *normal*.
        ///     If *grouped*, the items are displayed in groups (when a trace `legendgroup`
        ///     is provided). if *grouped+reversed*, the items are displayed in the opposite
        ///     order as *grouped*.
        /// </summary>
        [JsonPropertyName(@"traceorder")]
        public TraceOrderFlag? TraceOrder { get; set;} 

        /// <summary>
        ///     Sets the amount of vertical space (in px) between legend groups.
        /// </summary>
        [JsonPropertyName(@"tracegroupgap")]
        public float? TraceGroupGap { get; set;} 

        /// <summary>
        ///     Determines if the legend items symbols scale with their corresponding *trace*
        ///     attributes or remain *constant* independent of the symbol size on the graph.
        /// </summary>
        [JsonPropertyName(@"itemsizing")]
        public ItemSizingEnum? ItemSizing { get; set;} 

        /// <summary>
        ///     Determines the behavior on legend item click. *toggle* toggles the visibility
        ///     of the item clicked on the graph. *toggleothers* makes the clicked item
        ///     the sole visible item on the graph. *false* disable legend item click interactions.
        /// </summary>
        [JsonPropertyName(@"itemclick")]
        public ItemClickEnum? ItemClick { get; set;} 

        /// <summary>
        ///     Determines the behavior on legend item double-click. *toggle* toggles the
        ///     visibility of the item clicked on the graph. *toggleothers* makes the clicked
        ///     item the sole visible item on the graph. *false* disable legend item double-click
        ///     interactions.
        /// </summary>
        [JsonPropertyName(@"itemdoubleclick")]
        public ItemDoubleClickEnum? ItemDoubleClick { get; set;} 

        /// <summary>
        ///     Sets the x position (in normalized coordinates) of the legend. Defaults
        ///     to *1.02* for vertical legends and defaults to *0* for horizontal legends.
        /// </summary>
        [JsonPropertyName(@"x")]
        public float? X { get; set;} 

        /// <summary>
        ///     Sets the legend's horizontal position anchor. This anchor binds the `x`
        ///     position to the *left*, *center* or *right* of the legend. Value *auto*
        ///     anchors legends to the right for `x` values greater than or equal to 2/3,
        ///     anchors legends to the left for `x` values less than or equal to 1/3 and
        ///     anchors legends with respect to their center otherwise.
        /// </summary>
        [JsonPropertyName(@"xanchor")]
        public XAnchorEnum? XAnchor { get; set;} 

        /// <summary>
        ///     Sets the y position (in normalized coordinates) of the legend. Defaults
        ///     to *1* for vertical legends, defaults to *-0.1* for horizontal legends on
        ///     graphs w/o range sliders and defaults to *1.1* for horizontal legends on
        ///     graph with one or multiple range sliders.
        /// </summary>
        [JsonPropertyName(@"y")]
        public float? Y { get; set;} 

        /// <summary>
        ///     Sets the legend's vertical position anchor This anchor binds the `y` position
        ///     to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends
        ///     at their bottom for `y` values less than or equal to 1/3, anchors legends
        ///     to at their top for `y` values greater than or equal to 2/3 and anchors
        ///     legends with respect to their middle otherwise.
        /// </summary>
        [JsonPropertyName(@"yanchor")]
        public YAnchorEnum? YAnchor { get; set;} 

        /// <summary>
        ///     Controls persistence of legend-driven changes in trace and pie label visibility.
        ///     Defaults to `layout.uirevision`.
        /// </summary>
        [JsonPropertyName(@"uirevision")]
        public object UiRevision { get; set;} 

        /// <summary>
        ///     Sets the vertical alignment of the symbols with respect to their associated
        ///     text.
        /// </summary>
        [JsonPropertyName(@"valign")]
        public VAlignEnum? VAlign { get; set;} 

        /// <summary>
        ///     Gets or sets the Title.
        /// </summary>
        [JsonPropertyName(@"title")]
        public Title Title { get; set;} 

    }
}