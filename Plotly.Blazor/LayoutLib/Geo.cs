/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib.GeoLib;

namespace Plotly.Blazor.LayoutLib
{
    /// <summary>
    ///     The Geo class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Geo 
    {
        /// <summary>
        ///     Gets or sets the Domain.
        /// </summary>
        [JsonPropertyName(@"domain")]
        public Plotly.Blazor.LayoutLib.GeoLib.Domain Domain { get; set;} 

        /// <summary>
        ///     Determines if this subplot's view settings are auto-computed to fit trace
        ///     data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat`
        ///     getting auto-filled. On maps with a non-clipped projection, setting `fitbounds`
        ///     leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting
        ///     auto-filled. On maps with a clipped projection, setting `fitbounds` leads
        ///     to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`,
        ///     `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*,
        ///     only the trace's visible locations are considered in the `fitbounds` computations.
        ///     If *geojson*, the entire trace input `geojson` (if provided) is considered
        ///     in the `fitbounds` computations, Defaults to *false*.
        /// </summary>
        [JsonPropertyName(@"fitbounds")]
        public Plotly.Blazor.LayoutLib.GeoLib.FitBoundsEnum? FitBounds { get; set;} 

        /// <summary>
        ///     Sets the resolution of the base layers. The values have units of km/mm e.g.
        ///     110 corresponds to a scale ratio of 1:110,000,000.
        /// </summary>
        [JsonPropertyName(@"resolution")]
        public Plotly.Blazor.LayoutLib.GeoLib.ResolutionEnum? Resolution { get; set;} 

        /// <summary>
        ///     Set the scope of the map.
        /// </summary>
        [JsonPropertyName(@"scope")]
        public Plotly.Blazor.LayoutLib.GeoLib.ScopeEnum? Scope { get; set;} 

        /// <summary>
        ///     Gets or sets the Projection.
        /// </summary>
        [JsonPropertyName(@"projection")]
        public Plotly.Blazor.LayoutLib.GeoLib.Projection Projection { get; set;} 

        /// <summary>
        ///     Gets or sets the Center.
        /// </summary>
        [JsonPropertyName(@"center")]
        public Plotly.Blazor.LayoutLib.GeoLib.Center Center { get; set;} 

        /// <summary>
        ///     Sets the default visibility of the base layers.
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <summary>
        ///     Sets whether or not the coastlines are drawn.
        /// </summary>
        [JsonPropertyName(@"showcoastlines")]
        public bool? ShowCoastlines { get; set;} 

        /// <summary>
        ///     Sets the coastline color.
        /// </summary>
        [JsonPropertyName(@"coastlinecolor")]
        public object CoastlineColor { get; set;} 

        /// <summary>
        ///     Sets the coastline stroke width (in px).
        /// </summary>
        [JsonPropertyName(@"coastlinewidth")]
        public float? CoastlineWidth { get; set;} 

        /// <summary>
        ///     Sets whether or not land masses are filled in color.
        /// </summary>
        [JsonPropertyName(@"showland")]
        public bool? ShowLand { get; set;} 

        /// <summary>
        ///     Sets the land mass color.
        /// </summary>
        [JsonPropertyName(@"landcolor")]
        public object LandColor { get; set;} 

        /// <summary>
        ///     Sets whether or not oceans are filled in color.
        /// </summary>
        [JsonPropertyName(@"showocean")]
        public bool? ShowOcean { get; set;} 

        /// <summary>
        ///     Sets the ocean color
        /// </summary>
        [JsonPropertyName(@"oceancolor")]
        public object OceanColor { get; set;} 

        /// <summary>
        ///     Sets whether or not lakes are drawn.
        /// </summary>
        [JsonPropertyName(@"showlakes")]
        public bool? ShowLakes { get; set;} 

        /// <summary>
        ///     Sets the color of the lakes.
        /// </summary>
        [JsonPropertyName(@"lakecolor")]
        public object LakeColor { get; set;} 

        /// <summary>
        ///     Sets whether or not rivers are drawn.
        /// </summary>
        [JsonPropertyName(@"showrivers")]
        public bool? ShowRivers { get; set;} 

        /// <summary>
        ///     Sets color of the rivers.
        /// </summary>
        [JsonPropertyName(@"rivercolor")]
        public object RiverColor { get; set;} 

        /// <summary>
        ///     Sets the stroke width (in px) of the rivers.
        /// </summary>
        [JsonPropertyName(@"riverwidth")]
        public float? RiverWidth { get; set;} 

        /// <summary>
        ///     Sets whether or not country boundaries are drawn.
        /// </summary>
        [JsonPropertyName(@"showcountries")]
        public bool? ShowCountries { get; set;} 

        /// <summary>
        ///     Sets line color of the country boundaries.
        /// </summary>
        [JsonPropertyName(@"countrycolor")]
        public object CountryColor { get; set;} 

        /// <summary>
        ///     Sets line width (in px) of the country boundaries.
        /// </summary>
        [JsonPropertyName(@"countrywidth")]
        public float? CountryWidth { get; set;} 

        /// <summary>
        ///     Sets whether or not boundaries of subunits within countries (e.g. states,
        ///     provinces) are drawn.
        /// </summary>
        [JsonPropertyName(@"showsubunits")]
        public bool? ShowSubUnits { get; set;} 

        /// <summary>
        ///     Sets the color of the subunits boundaries.
        /// </summary>
        [JsonPropertyName(@"subunitcolor")]
        public object SubUnitColor { get; set;} 

        /// <summary>
        ///     Sets the stroke width (in px) of the subunits boundaries.
        /// </summary>
        [JsonPropertyName(@"subunitwidth")]
        public float? SubUnitWidth { get; set;} 

        /// <summary>
        ///     Sets whether or not a frame is drawn around the map.
        /// </summary>
        [JsonPropertyName(@"showframe")]
        public bool? ShowFrame { get; set;} 

        /// <summary>
        ///     Sets the color the frame.
        /// </summary>
        [JsonPropertyName(@"framecolor")]
        public object FrameColor { get; set;} 

        /// <summary>
        ///     Sets the stroke width (in px) of the frame.
        /// </summary>
        [JsonPropertyName(@"framewidth")]
        public float? FrameWidth { get; set;} 

        /// <summary>
        ///     Set the background color of the map
        /// </summary>
        [JsonPropertyName(@"bgcolor")]
        public object BgColor { get; set;} 

        /// <summary>
        ///     Gets or sets the LonAxis.
        /// </summary>
        [JsonPropertyName(@"lonaxis")]
        public Plotly.Blazor.LayoutLib.GeoLib.LonAxis LonAxis { get; set;} 

        /// <summary>
        ///     Gets or sets the LaTaxis.
        /// </summary>
        [JsonPropertyName(@"lataxis")]
        public Plotly.Blazor.LayoutLib.GeoLib.LaTaxis LaTaxis { get; set;} 

        /// <summary>
        ///     Controls persistence of user-driven changes in the view (projection and
        ///     center). Defaults to `layout.uirevision`.
        /// </summary>
        [JsonPropertyName(@"uirevision")]
        public object UiRevision { get; set;} 

    }
}