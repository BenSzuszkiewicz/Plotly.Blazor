/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib.UpdateMenuLib;

namespace Plotly.Blazor.LayoutLib
{
    /// <summary>
    ///     The UpdateMenu class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class UpdateMenu 
    {
        /// <summary>
        ///     Determines whether or not the update menu is visible.
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <summary>
        ///     Determines whether the buttons are accessible via a dropdown menu or whether
        ///     the buttons are stacked horizontally or vertically
        /// </summary>
        [JsonPropertyName(@"type")]
        public TypeEnum? Type { get; set;} 

        /// <summary>
        ///     Determines the direction in which the buttons are laid out, whether in a
        ///     dropdown menu or a row/column of buttons. For `left` and `up`, the buttons
        ///     will still appear in left-to-right or top-to-bottom order respectively.
        /// </summary>
        [JsonPropertyName(@"direction")]
        public DirectionEnum? Direction { get; set;} 

        /// <summary>
        ///     Determines which button (by index starting from 0) is considered active.
        /// </summary>
        [JsonPropertyName(@"active")]
        public int? Active { get; set;} 

        /// <summary>
        ///     Highlights active dropdown item or active button if true.
        /// </summary>
        [JsonPropertyName(@"showactive")]
        public bool? ShowActive { get; set;} 

        /// <summary>
        ///     Gets or sets the Buttons.
        /// </summary>
        [JsonPropertyName(@"buttons")]
        public IList<Button> Buttons { get; set;} 

        /// <summary>
        ///     Sets the x position (in normalized coordinates) of the update menu.
        /// </summary>
        [JsonPropertyName(@"x")]
        public float? X { get; set;} 

        /// <summary>
        ///     Sets the update menu's horizontal position anchor. This anchor binds the
        ///     `x` position to the *left*, *center* or *right* of the range selector.
        /// </summary>
        [JsonPropertyName(@"xanchor")]
        public XAnchorEnum? XAnchor { get; set;} 

        /// <summary>
        ///     Sets the y position (in normalized coordinates) of the update menu.
        /// </summary>
        [JsonPropertyName(@"y")]
        public float? Y { get; set;} 

        /// <summary>
        ///     Sets the update menu's vertical position anchor This anchor binds the `y`
        ///     position to the *top*, *middle* or *bottom* of the range selector.
        /// </summary>
        [JsonPropertyName(@"yanchor")]
        public YAnchorEnum? YAnchor { get; set;} 

        /// <summary>
        ///     Sets the padding around the buttons or dropdown menu.
        /// </summary>
        [JsonPropertyName(@"pad")]
        public Pad Pad { get; set;} 

        /// <summary>
        ///     Sets the font of the update menu button text.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Font Font { get; set;} 

        /// <summary>
        ///     Sets the background color of the update menu buttons.
        /// </summary>
        [JsonPropertyName(@"bgcolor")]
        public object BgColor { get; set;} 

        /// <summary>
        ///     Sets the color of the border enclosing the update menu.
        /// </summary>
        [JsonPropertyName(@"bordercolor")]
        public object BorderColor { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the border enclosing the update menu.
        /// </summary>
        [JsonPropertyName(@"borderwidth")]
        public float? BorderWidth { get; set;} 

        /// <summary>
        ///     When used in a template, named items are created in the output figure in
        ///     addition to any items the figure already has in this array. You can modify
        ///     these items in the output figure by making your own item with `templateitemname`
        ///     matching this `name` alongside your modifications (including `visible: false`
        ///     or `enabled: false` to hide it). Has no effect outside of a template.
        /// </summary>
        [JsonPropertyName(@"name")]
        public string Name { get; set;} 

        /// <summary>
        ///     Used to refer to a named item in this array in the template. Named items
        ///     from the template will be created even without a matching item in the input
        ///     figure, but you can modify one by making an item with `templateitemname`
        ///     matching its `name`, alongside your modifications (including `visible: false`
        ///     or `enabled: false` to hide it). If there is no template or no matching
        ///     item, this item will be hidden unless you explicitly show it with `visible:
        ///     true`.
        /// </summary>
        [JsonPropertyName(@"templateitemname")]
        public string TemplateItemName { get; set;} 

    }
}