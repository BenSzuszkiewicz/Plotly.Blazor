/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;

namespace Plotly.Blazor.LayoutLib.SceneLib
{
    /// <summary>
    ///     The Annotation class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Annotation 
    {
        /// <summary>
        ///     Determines whether or not this annotation is visible.
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <summary>
        ///     Sets the annotation&#39;s x position.
        /// </summary>
        [JsonPropertyName(@"x")]
        public object X { get; set;} 

        /// <summary>
        ///     Sets the annotation&#39;s y position.
        /// </summary>
        [JsonPropertyName(@"y")]
        public object Y { get; set;} 

        /// <summary>
        ///     Sets the annotation&#39;s z position.
        /// </summary>
        [JsonPropertyName(@"z")]
        public object Z { get; set;} 

        /// <summary>
        ///     Sets the x component of the arrow tail about the arrow head (in pixels).
        /// </summary>
        [JsonPropertyName(@"ax")]
        public float? Ax { get; set;} 

        /// <summary>
        ///     Sets the y component of the arrow tail about the arrow head (in pixels).
        /// </summary>
        [JsonPropertyName(@"ay")]
        public float? Ay { get; set;} 

        /// <summary>
        ///     Sets the text box&#39;s horizontal position anchor This anchor binds the
        ///     <c>x</c> position to the <c>left</c>, <c>center</c> or <c>right</c> of the
        ///     annotation. For example, if <c>x</c> is set to 1, <c>xref</c> to <c>paper</c>
        ///     and <c>xanchor</c> to <c>right</c> then the right-most portion of the annotation
        ///     lines up with the right-most edge of the plotting area. If <c>auto</c>,
        ///     the anchor is equivalent to <c>center</c> for data-referenced annotations
        ///     or if there is an arrow, whereas for paper-referenced with no arrow, the
        ///     anchor picked corresponds to the closest side.
        /// </summary>
        [JsonPropertyName(@"xanchor")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.XAnchorEnum? XAnchor { get; set;} 

        /// <summary>
        ///     Shifts the position of the whole annotation and arrow to the right (positive)
        ///     or left (negative) by this many pixels.
        /// </summary>
        [JsonPropertyName(@"xshift")]
        public float? XShift { get; set;} 

        /// <summary>
        ///     Sets the text box&#39;s vertical position anchor This anchor binds the <c>y</c>
        ///     position to the <c>top</c>, <c>middle</c> or <c>bottom</c> of the annotation.
        ///     For example, if <c>y</c> is set to 1, <c>yref</c> to <c>paper</c> and <c>yanchor</c>
        ///     to <c>top</c> then the top-most portion of the annotation lines up with
        ///     the top-most edge of the plotting area. If <c>auto</c>, the anchor is equivalent
        ///     to <c>middle</c> for data-referenced annotations or if there is an arrow,
        ///     whereas for paper-referenced with no arrow, the anchor picked corresponds
        ///     to the closest side.
        /// </summary>
        [JsonPropertyName(@"yanchor")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.YAnchorEnum? YAnchor { get; set;} 

        /// <summary>
        ///     Shifts the position of the whole annotation and arrow up (positive) or down
        ///     (negative) by this many pixels.
        /// </summary>
        [JsonPropertyName(@"yshift")]
        public float? YShift { get; set;} 

        /// <summary>
        ///     Sets the text associated with this annotation. Plotly uses a subset of HTML
        ///     tags to do things like newline (&lt;br&gt;), bold (&lt;b&gt;&lt;/b&gt;),
        ///     italics (&lt;i&gt;&lt;/i&gt;), hyperlinks (&lt;a href=<c>...</c>&gt;&lt;/a&gt;).
        ///     Tags &lt;em&gt;, &lt;sup&gt;, &lt;sub&gt; &lt;span&gt; are also supported.
        /// </summary>
        [JsonPropertyName(@"text")]
        public string Text { get; set;} 

        /// <summary>
        ///     Sets the angle at which the <c>text</c> is drawn with respect to the horizontal.
        /// </summary>
        [JsonPropertyName(@"textangle")]
        public float? TextAngle { get; set;} 

        /// <summary>
        ///     Sets the annotation text font.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.Font Font { get; set;} 

        /// <summary>
        ///     Sets an explicit width for the text box. null (default) lets the text set
        ///     the box width. Wider text will be clipped. There is no automatic wrapping;
        ///     use &lt;br&gt; to start a new line.
        /// </summary>
        [JsonPropertyName(@"width")]
        public float? Width { get; set;} 

        /// <summary>
        ///     Sets an explicit height for the text box. null (default) lets the text set
        ///     the box height. Taller text will be clipped.
        /// </summary>
        [JsonPropertyName(@"height")]
        public float? Height { get; set;} 

        /// <summary>
        ///     Sets the opacity of the annotation (text + arrow).
        /// </summary>
        [JsonPropertyName(@"opacity")]
        public float? Opacity { get; set;} 

        /// <summary>
        ///     Sets the horizontal alignment of the <c>text</c> within the box. Has an
        ///     effect only if <c>text</c> spans two or more lines (i.e. <c>text</c> contains
        ///     one or more &lt;br&gt; HTML tags) or if an explicit width is set to override
        ///     the text width.
        /// </summary>
        [JsonPropertyName(@"align")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.AlignEnum? Align { get; set;} 

        /// <summary>
        ///     Sets the vertical alignment of the <c>text</c> within the box. Has an effect
        ///     only if an explicit height is set to override the text height.
        /// </summary>
        [JsonPropertyName(@"valign")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.VAlignEnum? VAlign { get; set;} 

        /// <summary>
        ///     Sets the background color of the annotation.
        /// </summary>
        [JsonPropertyName(@"bgcolor")]
        public object BgColor { get; set;} 

        /// <summary>
        ///     Sets the color of the border enclosing the annotation <c>text</c>.
        /// </summary>
        [JsonPropertyName(@"bordercolor")]
        public object BorderColor { get; set;} 

        /// <summary>
        ///     Sets the padding (in px) between the <c>text</c> and the enclosing border.
        /// </summary>
        [JsonPropertyName(@"borderpad")]
        public float? BorderPad { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the border enclosing the annotation <c>text</c>.
        /// </summary>
        [JsonPropertyName(@"borderwidth")]
        public float? BorderWidth { get; set;} 

        /// <summary>
        ///     Determines whether or not the annotation is drawn with an arrow. If <c>true</c>,
        ///     <c>text</c> is placed near the arrow&#39;s tail. If <c>false</c>, <c>text</c>
        ///     lines up with the <c>x</c> and <c>y</c> provided.
        /// </summary>
        [JsonPropertyName(@"showarrow")]
        public bool? ShowArrow { get; set;} 

        /// <summary>
        ///     Sets the color of the annotation arrow.
        /// </summary>
        [JsonPropertyName(@"arrowcolor")]
        public object ArrowColor { get; set;} 

        /// <summary>
        ///     Sets the end annotation arrow head style.
        /// </summary>
        [JsonPropertyName(@"arrowhead")]
        public int? Arrowhead { get; set;} 

        /// <summary>
        ///     Sets the start annotation arrow head style.
        /// </summary>
        [JsonPropertyName(@"startarrowhead")]
        public int? StartArrowhead { get; set;} 

        /// <summary>
        ///     Sets the annotation arrow head position.
        /// </summary>
        [JsonPropertyName(@"arrowside")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.ArrowSideFlag? ArrowSide { get; set;} 

        /// <summary>
        ///     Sets the size of the end annotation arrow head, relative to <c>arrowwidth</c>.
        ///     A value of 1 (default) gives a head about 3x as wide as the line.
        /// </summary>
        [JsonPropertyName(@"arrowsize")]
        public float? ArrowSize { get; set;} 

        /// <summary>
        ///     Sets the size of the start annotation arrow head, relative to <c>arrowwidth</c>.
        ///     A value of 1 (default) gives a head about 3x as wide as the line.
        /// </summary>
        [JsonPropertyName(@"startarrowsize")]
        public float? StartArrowSize { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of annotation arrow line.
        /// </summary>
        [JsonPropertyName(@"arrowwidth")]
        public float? ArrowWidth { get; set;} 

        /// <summary>
        ///     Sets a distance, in pixels, to move the end arrowhead away from the position
        ///     it is pointing at, for example to point at the edge of a marker independent
        ///     of zoom. Note that this shortens the arrow from the <c>ax</c> / <c>ay</c>
        ///     vector, in contrast to <c>xshift</c> / <c>yshift</c> which moves everything
        ///     by this amount.
        /// </summary>
        [JsonPropertyName(@"standoff")]
        public float? Standoff { get; set;} 

        /// <summary>
        ///     Sets a distance, in pixels, to move the start arrowhead away from the position
        ///     it is pointing at, for example to point at the edge of a marker independent
        ///     of zoom. Note that this shortens the arrow from the <c>ax</c> / <c>ay</c>
        ///     vector, in contrast to <c>xshift</c> / <c>yshift</c> which moves everything
        ///     by this amount.
        /// </summary>
        [JsonPropertyName(@"startstandoff")]
        public float? StartStandoff { get; set;} 

        /// <summary>
        ///     Sets text to appear when hovering over this annotation. If omitted or blank,
        ///     no hover label will appear.
        /// </summary>
        [JsonPropertyName(@"hovertext")]
        public string HoverText { get; set;} 

        /// <summary>
        ///     Gets or sets the HoverLabel.
        /// </summary>
        [JsonPropertyName(@"hoverlabel")]
        public Plotly.Blazor.LayoutLib.SceneLib.AnnotationLib.HoverLabel HoverLabel { get; set;} 

        /// <summary>
        ///     Determines whether the annotation text box captures mouse move and click
        ///     events, or allows those events to pass through to data points in the plot
        ///     that may be behind the annotation. By default <c>captureevents</c> is <c>false</c>
        ///     unless <c>hovertext</c> is provided. If you use the event <c>plotly_clickannotation</c>
        ///     without <c>hovertext</c> you must explicitly enable <c>captureevents</c>.
        /// </summary>
        [JsonPropertyName(@"captureevents")]
        public bool? CaptureEvents { get; set;} 

        /// <summary>
        ///     When used in a template, named items are created in the output figure in
        ///     addition to any items the figure already has in this array. You can modify
        ///     these items in the output figure by making your own item with <c>templateitemname</c>
        ///     matching this <c>name</c> alongside your modifications (including &#39;visible:
        ///     false&#39; or &#39;enabled: false&#39; to hide it). Has no effect outside
        ///     of a template.
        /// </summary>
        [JsonPropertyName(@"name")]
        public string Name { get; set;} 

        /// <summary>
        ///     Used to refer to a named item in this array in the template. Named items
        ///     from the template will be created even without a matching item in the input
        ///     figure, but you can modify one by making an item with <c>templateitemname</c>
        ///     matching its <c>name</c>, alongside your modifications (including &#39;visible:
        ///     false&#39; or &#39;enabled: false&#39; to hide it). If there is no template
        ///     or no matching item, this item will be hidden unless you explicitly show
        ///     it with &#39;visible: true&#39;.
        /// </summary>
        [JsonPropertyName(@"templateitemname")]
        public string TemplateItemName { get; set;} 

    }
}