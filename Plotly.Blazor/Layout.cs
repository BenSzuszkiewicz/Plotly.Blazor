/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.LayoutLib;

namespace Plotly.Blazor
{
    /// <summary>
    ///     The Layout class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    [JsonConverter(typeof(SubplotConverter))]
    public class Layout 
    {
        /// <summary>
        ///     Sets the global font. Note that fonts used in traces and other layout components
        ///     inherit from the global font.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Plotly.Blazor.LayoutLib.Font Font { get; set;} 

        /// <summary>
        ///     Gets or sets the Title.
        /// </summary>
        [JsonPropertyName(@"title")]
        public Plotly.Blazor.LayoutLib.Title Title { get; set;} 

        /// <summary>
        ///     Gets or sets the UniformText.
        /// </summary>
        [JsonPropertyName(@"uniformtext")]
        public Plotly.Blazor.LayoutLib.UniformText UniformText { get; set;} 

        /// <summary>
        ///     Determines whether or not a layout width or height that has been left undefined
        ///     by the user is initialized on each relayout. Note that, regardless of this
        ///     attribute, an undefined layout width or height is always initialized on
        ///     the first call to plot.
        /// </summary>
        [JsonPropertyName(@"autosize")]
        public bool? AutoSize { get; set;} 

        /// <summary>
        ///     Sets the plot's width (in px).
        /// </summary>
        [JsonPropertyName(@"width")]
        public float? Width { get; set;} 

        /// <summary>
        ///     Sets the plot's height (in px).
        /// </summary>
        [JsonPropertyName(@"height")]
        public float? Height { get; set;} 

        /// <summary>
        ///     Gets or sets the Margin.
        /// </summary>
        [JsonPropertyName(@"margin")]
        public Plotly.Blazor.LayoutLib.Margin Margin { get; set;} 

        /// <summary>
        ///     Sets the background color of the paper where the graph is drawn.
        /// </summary>
        [JsonPropertyName(@"paper_bgcolor")]
        public object PaperBgColor { get; set;} 

        /// <summary>
        ///     Sets the background color of the plotting area in-between x and y axes.
        /// </summary>
        [JsonPropertyName(@"plot_bgcolor")]
        public object PlotBgColor { get; set;} 

        /// <summary>
        ///     Sets the decimal and thousand separators. For example, *. * puts a '.' before
        ///     decimals and a space between thousands. In English locales, dflt is *.,*
        ///     but other locales may alter this default.
        /// </summary>
        [JsonPropertyName(@"separators")]
        public string Separators { get; set;} 

        /// <summary>
        ///     Determines whether or not a text link citing the data source is placed at
        ///     the bottom-right cored of the figure. Has only an effect only on graphs
        ///     that have been generated via forked graphs from the Chart Studio Cloud (at
        ///     https://chart-studio.plotly.com or on-premise).
        /// </summary>
        [JsonPropertyName(@"hidesources")]
        public bool? HideSources { get; set;} 

        /// <summary>
        ///     Determines whether or not a legend is drawn. Default is `true` if there
        ///     is a trace to show and any of these: a) Two or more traces would by default
        ///     be shown in the legend. b) One pie trace is shown in the legend. c) One
        ///     trace is explicitly given with `showlegend: true`.
        /// </summary>
        [JsonPropertyName(@"showlegend")]
        public bool? ShowLegend { get; set;} 

        /// <summary>
        ///     Sets the default trace colors.
        /// </summary>
        [JsonPropertyName(@"colorway")]
        public IList<object> Colorway { get; set;} 

        /// <summary>
        ///     If provided, a changed value tells `Plotly.react` that one or more data
        ///     arrays has changed. This way you can modify arrays in-place rather than
        ///     making a complete new copy for an incremental change. If NOT provided, `Plotly.react`
        ///     assumes that data arrays are being treated as immutable, thus any data array
        ///     with a different identity from its predecessor contains new data.
        /// </summary>
        [JsonPropertyName(@"datarevision")]
        public object DataRevision { get; set;} 

        /// <summary>
        ///     Used to allow user interactions with the plot to persist after `Plotly.react`
        ///     calls that are unaware of these interactions. If `uirevision` is omitted,
        ///     or if it is given and it changed from the previous `Plotly.react` call,
        ///     the exact new figure is used. If `uirevision` is truthy and did NOT change,
        ///     any attribute that has been affected by user interactions and did not receive
        ///     a different value in the new figure will keep the interaction value. `layout.uirevision`
        ///     attribute serves as the default for `uirevision` attributes in various sub-containers.
        ///     For finer control you can set these sub-attributes directly. For example,
        ///     if your app separately controls the data on the x and y axes you might set
        ///     `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`. Then if only the
        ///     y data is changed, you can update `yaxis.uirevision=*quantity*` and the
        ///     y axis range will reset but the x axis range will retain any user-driven
        ///     zoom.
        /// </summary>
        [JsonPropertyName(@"uirevision")]
        public object UiRevision { get; set;} 

        /// <summary>
        ///     Controls persistence of user-driven changes in `editable: true` configuration,
        ///     other than trace names and axis titles. Defaults to `layout.uirevision`.
        /// </summary>
        [JsonPropertyName(@"editrevision")]
        public object EditRevision { get; set;} 

        /// <summary>
        ///     Controls persistence of user-driven changes in selected points from all
        ///     traces.
        /// </summary>
        [JsonPropertyName(@"selectionrevision")]
        public object SelectionRevision { get; set;} 

        /// <summary>
        ///     Default attributes to be applied to the plot. Templates can be created from
        ///     existing plots using `Plotly.makeTemplate`, or created manually. They should
        ///     be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate,
        ///     ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the
        ///     attribute structure of `layout` and a data trace.  Trace templates are applied
        ///     cyclically to traces of each type. Container arrays (eg `annotations`) have
        ///     special handling: An object ending in `defaults` (eg `annotationdefaults`)
        ///     is applied to each array item. But if an item has a `templateitemname` key
        ///     we look in the template array for an item with matching `name` and apply
        ///     that instead. If no matching `name` is found we mark the item invisible.
        ///     Any named template item not referenced is appended to the end of the array,
        ///     so you can use this for a watermark annotation or a logo image, for example.
        ///     To omit one of these items on the plot, make an item with matching `templateitemname`
        ///     and `visible: false`.
        /// </summary>
        [JsonPropertyName(@"template")]
        public object Template { get; set;} 

        /// <summary>
        ///     Gets or sets the ModeBar.
        /// </summary>
        [JsonPropertyName(@"modebar")]
        public Plotly.Blazor.LayoutLib.ModeBar ModeBar { get; set;} 

        /// <summary>
        ///     Gets or sets the NewShape.
        /// </summary>
        [JsonPropertyName(@"newshape")]
        public Plotly.Blazor.LayoutLib.NewShape NewShape { get; set;} 

        /// <summary>
        ///     Gets or sets the ActiveShape.
        /// </summary>
        [JsonPropertyName(@"activeshape")]
        public Plotly.Blazor.LayoutLib.ActiveShape ActiveShape { get; set;} 

        /// <summary>
        ///     Assigns extra meta information that can be used in various `text` attributes.
        ///     Attributes such as the graph, axis and colorbar `title.text`, annotation
        ///     `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and
        ///     `sliders` `label` text all support `meta`. One can access `meta` fields
        ///     using template strings: `%{meta[i]}` where `i` is the index of the `meta`
        ///     item in question. `meta` can also be an object for example `{key: value}`
        ///     which can be accessed %{meta[key]}.
        /// </summary>
        [JsonPropertyName(@"meta")]
        public object Meta { get; set;} 

        /// <summary>
        ///     Sets transition options used during Plotly.react updates.
        /// </summary>
        [JsonPropertyName(@"transition")]
        public Plotly.Blazor.LayoutLib.Transition Transition { get; set;} 

        /// <summary>
        ///     Determines the mode of single click interactions. *event* is the default
        ///     value and emits the `plotly_click` event. In addition this mode emits the
        ///     `plotly_selected` event in drag modes *lasso* and *select*, but with no
        ///     event data attached (kept for compatibility reasons). The *select* flag
        ///     enables selecting single data points via click. This mode also supports
        ///     persistent selections, meaning that pressing Shift while clicking, adds
        ///     to / subtracts from an existing selection. *select* with `hovermode`: *x*
        ///     can be confusing, consider explicitly setting `hovermode`: *closest* when
        ///     using this feature. Selection events are sent accordingly as long as *event*
        ///     flag is set as well. When the *event* flag is missing, `plotly_click` and
        ///     `plotly_selected` events are not fired.
        /// </summary>
        [JsonPropertyName(@"clickmode")]
        public Plotly.Blazor.LayoutLib.ClickModeFlag? ClickMode { get; set;} 

        /// <summary>
        ///     Determines the mode of drag interactions. *select* and *lasso* apply only
        ///     to scatter traces with markers or text. *orbit* and *turntable* apply only
        ///     to 3D scenes.
        /// </summary>
        [JsonPropertyName(@"dragmode")]
        public Plotly.Blazor.LayoutLib.DragModeEnum? DragMode { get; set;} 

        /// <summary>
        ///     Determines the mode of hover interactions. If *closest*, a single hoverlabel
        ///     will appear for the *closest* point within the `hoverdistance`. If *x* (or
        ///     *y*), multiple hoverlabels will appear for multiple points at the *closest*
        ///     x- (or y-) coordinate within the `hoverdistance`, with the caveat that no
        ///     more than one hoverlabel will appear per trace. If *x unified* (or *y unified*),
        ///     a single hoverlabel will appear multiple points at the closest x- (or y-)
        ///     coordinate within the `hoverdistance` with the caveat that no more than
        ///     one hoverlabel will appear per trace. In this mode, spikelines are enabled
        ///     by default perpendicular to the specified axis. If false, hover interactions
        ///     are disabled. If `clickmode` includes the *select* flag, `hovermode` defaults
        ///     to *closest*. If `clickmode` lacks the *select* flag, it defaults to *x*
        ///     or *y* (depending on the trace's `orientation` value) for plots based on
        ///     cartesian coordinates. For anything else the default value is *closest*.
        /// </summary>
        [JsonPropertyName(@"hovermode")]
        public Plotly.Blazor.LayoutLib.HoverModeEnum? HoverMode { get; set;} 

        /// <summary>
        ///     Sets the default distance (in pixels) to look for data to add hover labels
        ///     (-1 means no cutoff, 0 means no looking for data). This is only a real distance
        ///     for hovering on point-like objects, like scatter points. For area-like objects
        ///     (bars, scatter fills, etc) hovering is on inside the area and off outside,
        ///     but these objects will not supersede hover on point-like objects in case
        ///     of conflict.
        /// </summary>
        [JsonPropertyName(@"hoverdistance")]
        public int? HoverDistance { get; set;} 

        /// <summary>
        ///     Sets the default distance (in pixels) to look for data to draw spikelines
        ///     to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance,
        ///     distance does not apply to area-like objects. In addition, some objects
        ///     can be hovered on but will not generate spikelines, such as scatter fills.
        /// </summary>
        [JsonPropertyName(@"spikedistance")]
        public int? SpikeDistance { get; set;} 

        /// <summary>
        ///     Gets or sets the HoverLabel.
        /// </summary>
        [JsonPropertyName(@"hoverlabel")]
        public Plotly.Blazor.LayoutLib.HoverLabel HoverLabel { get; set;} 

        /// <summary>
        ///     When `dragmode` is set to *select*, this limits the selection of the drag
        ///     to horizontal, vertical or diagonal. *h* only allows horizontal selection,
        ///     *v* only vertical, *d* only diagonal and *any* sets no limit.
        /// </summary>
        [JsonPropertyName(@"selectdirection")]
        public Plotly.Blazor.LayoutLib.SelectDirectionEnum? SelectDirection { get; set;} 

        /// <summary>
        ///     Gets or sets the Grid.
        /// </summary>
        [JsonPropertyName(@"grid")]
        public Plotly.Blazor.LayoutLib.Grid Grid { get; set;} 

        /// <summary>
        ///     Sets the default calendar system to use for interpreting and displaying
        ///     dates throughout the plot.
        /// </summary>
        [JsonPropertyName(@"calendar")]
        public Plotly.Blazor.LayoutLib.CalendarEnum? Calendar { get; set;} 

        /// <summary>
        ///     Gets or sets the XAxis.
        /// </summary>
        [JsonPropertyName(@"xaxis")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.XAxis> XAxis { get; set;} 

        /// <summary>
        ///     Gets or sets the YAxis.
        /// </summary>
        [JsonPropertyName(@"yaxis")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.YAxis> YAxis { get; set;} 

        /// <summary>
        ///     Gets or sets the Ternary.
        /// </summary>
        [JsonPropertyName(@"ternary")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.Ternary> Ternary { get; set;} 

        /// <summary>
        ///     Gets or sets the Scene.
        /// </summary>
        [JsonPropertyName(@"scene")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.Scene> Scene { get; set;} 

        /// <summary>
        ///     Gets or sets the Geo.
        /// </summary>
        [JsonPropertyName(@"geo")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.Geo> Geo { get; set;} 

        /// <summary>
        ///     Gets or sets the MapBox.
        /// </summary>
        [JsonPropertyName(@"mapbox")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.MapBox> MapBox { get; set;} 

        /// <summary>
        ///     Gets or sets the Polar.
        /// </summary>
        [JsonPropertyName(@"polar")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.Polar> Polar { get; set;} 

        /// <summary>
        ///     Gets or sets the RadialAxis.
        /// </summary>
        [JsonPropertyName(@"radialaxis")]
        public Plotly.Blazor.LayoutLib.RadialAxis RadialAxis { get; set;} 

        /// <summary>
        ///     Gets or sets the AngularAxis.
        /// </summary>
        [JsonPropertyName(@"angularaxis")]
        public Plotly.Blazor.LayoutLib.AngularAxis AngularAxis { get; set;} 

        /// <summary>
        ///     Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets
        ///     the direction corresponding to positive angles in legacy polar charts.
        /// </summary>
        [JsonPropertyName(@"direction")]
        public Plotly.Blazor.LayoutLib.DirectionEnum? Direction { get; set;} 

        /// <summary>
        ///     Legacy polar charts are deprecated! Please switch to *polar* subplots. Rotates
        ///     the entire polar by the given angle in legacy polar charts.
        /// </summary>
        [JsonPropertyName(@"orientation")]
        public float? Orientation { get; set;} 

        /// <summary>
        ///     Gets or sets the Legend.
        /// </summary>
        [JsonPropertyName(@"legend")]
        public Plotly.Blazor.LayoutLib.Legend Legend { get; set;} 

        /// <summary>
        ///     Gets or sets the Annotations.
        /// </summary>
        [JsonPropertyName(@"annotations")]
        public IList<Plotly.Blazor.LayoutLib.Annotation> Annotations { get; set;} 

        /// <summary>
        ///     Gets or sets the Shapes.
        /// </summary>
        [JsonPropertyName(@"shapes")]
        public IList<Plotly.Blazor.LayoutLib.Shape> Shapes { get; set;} 

        /// <summary>
        ///     Gets or sets the Images.
        /// </summary>
        [JsonPropertyName(@"images")]
        public IList<Plotly.Blazor.LayoutLib.Image> Images { get; set;} 

        /// <summary>
        ///     Gets or sets the UpdateMenus.
        /// </summary>
        [JsonPropertyName(@"updatemenus")]
        public IList<Plotly.Blazor.LayoutLib.UpdateMenu> UpdateMenus { get; set;} 

        /// <summary>
        ///     Gets or sets the Sliders.
        /// </summary>
        [JsonPropertyName(@"sliders")]
        public IList<Plotly.Blazor.LayoutLib.Slider> Sliders { get; set;} 

        /// <summary>
        ///     Gets or sets the ColorScale.
        /// </summary>
        [JsonPropertyName(@"colorscale")]
        public Plotly.Blazor.LayoutLib.ColorScale ColorScale { get; set;} 

        /// <summary>
        ///     Gets or sets the ColorAxis.
        /// </summary>
        [JsonPropertyName(@"coloraxis")]
        [Subplot]
        public IList<Plotly.Blazor.LayoutLib.ColorAxis> ColorAxis { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  meta .
        /// </summary>
        [JsonPropertyName(@"metasrc")]
        public string MetaSrc { get; set;} 

    }
}