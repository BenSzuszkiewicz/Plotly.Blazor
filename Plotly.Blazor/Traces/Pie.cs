/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Traces.PieLib;

namespace Plotly.Blazor.Traces
{
    /// <summary>
    ///     The Pie class.
    ///     Implements the <see cref="ITrace" />
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Pie : ITrace
    {
        /// <inheritdoc/>
        [JsonPropertyName(@"type")]
        public TraceTypeEnum Type { get; } = TraceTypeEnum.Pie;

        /// <summary>
        ///     Determines whether or not this trace is visible. If *legendonly*, the trace
        ///     is not drawn, but can appear as a legend item (provided that the legend
        ///     itself is visible).
        /// </summary>
        [JsonPropertyName(@"visible")]
        public VisibleEnum? Visible { get; set;} 

        /// <summary>
        ///     Determines whether or not an item corresponding to this trace is shown in
        ///     the legend.
        /// </summary>
        [JsonPropertyName(@"showlegend")]
        public bool? ShowLegend { get; set;} 

        /// <summary>
        ///     Sets the legend group for this trace. Traces part of the same legend group
        ///     hide/show at the same time when toggling legend items.
        /// </summary>
        [JsonPropertyName(@"legendgroup")]
        public string LegendGroup { get; set;} 

        /// <summary>
        ///     Sets the opacity of the trace.
        /// </summary>
        [JsonPropertyName(@"opacity")]
        public float? Opacity { get; set;} 

        /// <summary>
        ///     Sets the trace name. The trace name appear as the legend item and on hover.
        /// </summary>
        [JsonPropertyName(@"name")]
        public string Name { get; set;} 

        /// <summary>
        ///     Assign an id to this trace, Use this to provide object constancy between
        ///     traces during animations and transitions.
        /// </summary>
        [JsonPropertyName(@"uid")]
        public string UId { get; set;} 

        /// <summary>
        ///     Assigns id labels to each datum. These ids for object constancy of data
        ///     points during animation. Should be an array of strings, not numbers or any
        ///     other type.
        /// </summary>
        [JsonPropertyName(@"ids")]
        public IList<object> Ids { get; set;} 

        /// <summary>
        ///     Assigns extra data each datum. This may be useful when listening to hover,
        ///     click and selection events. Note that, *scatter* traces also appends customdata
        ///     items in the markers DOM elements
        /// </summary>
        [JsonPropertyName(@"customdata")]
        public IList<object> CustomData { get; set;} 

        /// <summary>
        ///     Assigns extra meta information associated with this trace that can be used
        ///     in various text attributes. Attributes such as trace `name`, graph, axis
        ///     and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues`
        ///     and `sliders` `label` text all support `meta`. To access the trace `meta`
        ///     values in an attribute in the same trace, simply use `%{meta[i]}` where
        ///     `i` is the index or key of the `meta` item in question. To access trace
        ///     `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index
        ///     or key of the `meta` and `n` is the trace index.
        /// </summary>
        [JsonPropertyName(@"meta")]
        public object Meta { get; set;} 

        /// <summary>
        ///     Gets or sets the HoverLabel.
        /// </summary>
        [JsonPropertyName(@"hoverlabel")]
        public HoverLabel HoverLabel { get; set;} 

        /// <summary>
        ///     Gets or sets the Stream.
        /// </summary>
        [JsonPropertyName(@"stream")]
        public Stream Stream { get; set;} 

        /// <summary>
        ///     Gets or sets the Transforms.
        /// </summary>
        [JsonPropertyName(@"transforms")]
        [JsonConverter(typeof(PolymorphicConverter))]
        public IList<ITransform> Transforms { get; set;} 

        /// <summary>
        ///     Controls persistence of some user-driven changes to the trace: `constraintrange`
        ///     in `parcoords` traces, as well as some `editable: true` modifications such
        ///     as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that
        ///     other user-driven trace attribute changes are controlled by `layout` attributes:
        ///     `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints`
        ///     is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible
        ///     with `config: {editable: true}`) is controlled by `layout.editrevision`.
        ///     Trace changes are tracked by `uid`, which only falls back on trace index
        ///     if no `uid` is provided. So if your app can add/remove traces before the
        ///     end of the `data` array, such that the same trace has a different index,
        ///     you can still preserve user-driven changes if you give each trace a `uid`
        ///     that stays with it as it moves.
        /// </summary>
        [JsonPropertyName(@"uirevision")]
        public object UiRevision { get; set;} 

        /// <summary>
        ///     Sets the sector labels. If `labels` entries are duplicated, we sum associated
        ///     `values` or simply count occurrences if `values` is not provided. For other
        ///     array attributes (including color) we use the first non-empty entry among
        ///     all occurrences of the label.
        /// </summary>
        [JsonPropertyName(@"labels")]
        public IList<object> Labels { get; set;} 

        /// <summary>
        ///     Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel`
        ///     where `label0` is the starting label and `dlabel` the step.
        /// </summary>
        [JsonPropertyName(@"label0")]
        public float? Label0 { get; set;} 

        /// <summary>
        ///     Sets the label step. See `label0` for more info.
        /// </summary>
        [JsonPropertyName(@"dlabel")]
        public float? DLabel { get; set;} 

        /// <summary>
        ///     Sets the values of the sectors. If omitted, we count occurrences of each
        ///     label.
        /// </summary>
        [JsonPropertyName(@"values")]
        public IList<object> Values { get; set;} 

        /// <summary>
        ///     Gets or sets the Marker.
        /// </summary>
        [JsonPropertyName(@"marker")]
        public Marker Marker { get; set;} 

        /// <summary>
        ///     Sets text elements associated with each sector. If trace `textinfo` contains
        ///     a *text* flag, these elements will be seen on the chart. If trace `hoverinfo`
        ///     contains a *text* flag and *hovertext* is not set, these elements will be
        ///     seen in the hover labels.
        /// </summary>
        [JsonPropertyName(@"text")]
        public IList<object> Text { get; set;} 

        /// <summary>
        ///     Sets hover text elements associated with each sector. If a single string,
        ///     the same string appears for all data points. If an array of string, the
        ///     items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo`
        ///     must contain a *text* flag.
        /// </summary>
        [JsonPropertyName(@"hovertext")]
        public string HoverText { get; set;} 

        /// <summary>
        ///     If there are multiple pie charts that should be sized according to their
        ///     totals, link them by providing a non-empty group id here shared by every
        ///     trace in the same group.
        /// </summary>
        [JsonPropertyName(@"scalegroup")]
        public string ScaleGroup { get; set;} 

        /// <summary>
        ///     Determines which trace information appear on the graph.
        /// </summary>
        [JsonPropertyName(@"textinfo")]
        public TextInfoFlag? TextInfo { get; set;} 

        /// <summary>
        ///     Determines which trace information appear on hover. If `none` or `skip`
        ///     are set, no information is displayed upon hovering. But, if `none` is set,
        ///     click and hover events are still fired.
        /// </summary>
        [JsonPropertyName(@"hoverinfo")]
        public HoverInfoFlag? HoverInfo { get; set;} 

        /// <summary>
        ///     Template string used for rendering the information that appear on hover
        ///     box. Note that this will override `hoverinfo`. Variables are inserted using
        ///     %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's
        ///     syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
        ///     for details on the formatting syntax. Dates are formatted using d3-time-format's
        ///     syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}".
        ///     https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Formatting.md#format
        ///     for details on the date formatting syntax. The variables available in `hovertemplate`
        ///     are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.
        ///     Additionally, every attributes that can be specified per-point (the ones
        ///     that are `arrayOk: true`) are available. variables `label`, `color`, `value`,
        ///     `percent` and `text`. Anything contained in tag `<extra>` is displayed in
        ///     the secondary box, for example "<extra>{fullData.name}</extra>". To hide
        ///     the secondary box completely, use an empty tag `<extra></extra>`.
        /// </summary>
        [JsonPropertyName(@"hovertemplate")]
        public string HoverTemplate { get; set;} 

        /// <summary>
        ///     Template string used for rendering the information text that appear on points.
        ///     Note that this will override `textinfo`. Variables are inserted using %{variable},
        ///     for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format},
        ///     for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
        ///     for details on the formatting syntax. Dates are formatted using d3-time-format's
        ///     syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}".
        ///     https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Formatting.md#format
        ///     for details on the date formatting syntax. Every attributes that can be
        ///     specified per-point (the ones that are `arrayOk: true`) are available. variables
        ///     `label`, `color`, `value`, `percent` and `text`.
        /// </summary>
        [JsonPropertyName(@"texttemplate")]
        public string TextTemplate { get; set;} 

        /// <summary>
        ///     Specifies the location of the `textinfo`.
        /// </summary>
        [JsonPropertyName(@"textposition")]
        public TextPositionEnum? TextPosition { get; set;} 

        /// <summary>
        ///     Sets the font used for `textinfo`.
        /// </summary>
        [JsonPropertyName(@"textfont")]
        public TextFont TextFont { get; set;} 

        /// <summary>
        ///     Controls the orientation of the text inside chart sectors. When set to *auto*,
        ///     text may be oriented in any direction in order to be as big as possible
        ///     in the middle of a sector. The *horizontal* option orients text to be parallel
        ///     with the bottom of the chart, and may make text smaller in order to achieve
        ///     that goal. The *radial* option orients text along the radius of the sector.
        ///     The *tangential* option orients text perpendicular to the radius of the
        ///     sector.
        /// </summary>
        [JsonPropertyName(@"insidetextorientation")]
        public InsideTextOrientationEnum? InsideTextOrientation { get; set;} 

        /// <summary>
        ///     Sets the font used for `textinfo` lying inside the sector.
        /// </summary>
        [JsonPropertyName(@"insidetextfont")]
        public InsideTextFont InsideTextFont { get; set;} 

        /// <summary>
        ///     Sets the font used for `textinfo` lying outside the sector.
        /// </summary>
        [JsonPropertyName(@"outsidetextfont")]
        public OutsideTextFont OutsideTextFont { get; set;} 

        /// <summary>
        ///     Determines whether outside text labels can push the margins.
        /// </summary>
        [JsonPropertyName(@"automargin")]
        public bool? AutoMargin { get; set;} 

        /// <summary>
        ///     Gets or sets the Title.
        /// </summary>
        [JsonPropertyName(@"title")]
        public Title Title { get; set;} 

        /// <summary>
        ///     Gets or sets the Domain.
        /// </summary>
        [JsonPropertyName(@"domain")]
        public Domain Domain { get; set;} 

        /// <summary>
        ///     Sets the fraction of the radius to cut out of the pie. Use this to make
        ///     a donut chart.
        /// </summary>
        [JsonPropertyName(@"hole")]
        public float? Hole { get; set;} 

        /// <summary>
        ///     Determines whether or not the sectors are reordered from largest to smallest.
        /// </summary>
        [JsonPropertyName(@"sort")]
        public bool? Sort { get; set;} 

        /// <summary>
        ///     Specifies the direction at which succeeding sectors follow one another.
        /// </summary>
        [JsonPropertyName(@"direction")]
        public DirectionEnum? Direction { get; set;} 

        /// <summary>
        ///     Instead of the first slice starting at 12 o'clock, rotate to some other
        ///     angle.
        /// </summary>
        [JsonPropertyName(@"rotation")]
        public float? Rotation { get; set;} 

        /// <summary>
        ///     Sets the fraction of larger radius to pull the sectors out from the center.
        ///     This can be a constant to pull all slices apart from each other equally
        ///     or an array to highlight one or more slices.
        /// </summary>
        [JsonPropertyName(@"pull")]
        public float? Pull { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  ids .
        /// </summary>
        [JsonPropertyName(@"idssrc")]
        public string IdsSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  customdata .
        /// </summary>
        [JsonPropertyName(@"customdatasrc")]
        public string CustomDataSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  meta .
        /// </summary>
        [JsonPropertyName(@"metasrc")]
        public string MetaSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  labels .
        /// </summary>
        [JsonPropertyName(@"labelssrc")]
        public string LabelsSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  values .
        /// </summary>
        [JsonPropertyName(@"valuessrc")]
        public string ValuesSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  text .
        /// </summary>
        [JsonPropertyName(@"textsrc")]
        public string TextSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  hovertext .
        /// </summary>
        [JsonPropertyName(@"hovertextsrc")]
        public string HoverTextSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  hoverinfo .
        /// </summary>
        [JsonPropertyName(@"hoverinfosrc")]
        public string HoverInfoSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  hovertemplate .
        /// </summary>
        [JsonPropertyName(@"hovertemplatesrc")]
        public string HoverTemplateSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  texttemplate .
        /// </summary>
        [JsonPropertyName(@"texttemplatesrc")]
        public string TextTemplateSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  textposition .
        /// </summary>
        [JsonPropertyName(@"textpositionsrc")]
        public string TextPositionSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  pull .
        /// </summary>
        [JsonPropertyName(@"pullsrc")]
        public string PullSrc { get; set;} 

    }
}