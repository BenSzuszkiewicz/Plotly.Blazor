/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Traces.CarpetLib.AAxisLib;

namespace Plotly.Blazor.Traces.CarpetLib
{
    /// <summary>
    ///     The AAxis class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class AAxis 
    {
        /// <summary>
        ///     Sets default for all colors associated with this axis all at once: line,
        ///     font, tick, and grid colors. Grid color is lightened by blending this with
        ///     the plot background Individual pieces can override this.
        /// </summary>
        [JsonPropertyName(@"color")]
        public object Color { get; set;} 

        /// <summary>
        ///     Gets or sets the Smoothing.
        /// </summary>
        [JsonPropertyName(@"smoothing")]
        public float? Smoothing { get; set;} 

        /// <summary>
        ///     Gets or sets the Title.
        /// </summary>
        [JsonPropertyName(@"title")]
        public Title Title { get; set;} 

        /// <summary>
        ///     Sets the axis type. By default, plotly attempts to determined the axis type
        ///     by looking into the data of the traces that referenced the axis in question.
        /// </summary>
        [JsonPropertyName(@"type")]
        public TypeEnum? Type { get; set;} 

        /// <summary>
        ///     Determines whether or not the range of this axis is computed in relation
        ///     to the input data. See `rangemode` for more info. If `range` is provided,
        ///     then `autorange` is set to *false*.
        /// </summary>
        [JsonPropertyName(@"autorange")]
        public AutoRangeEnum? AutoRange { get; set;} 

        /// <summary>
        ///     If *normal*, the range is computed in relation to the extrema of the input
        ///     data. If *tozero*`, the range extends to 0, regardless of the input data
        ///     If *nonnegative*, the range is non-negative, regardless of the input data.
        /// </summary>
        [JsonPropertyName(@"rangemode")]
        public RangeModeEnum? RangeMode { get; set;} 

        /// <summary>
        ///     Sets the range of this axis. If the axis `type` is *log*, then you must
        ///     take the log of your desired range (e.g. to set the range from 1 to 100,
        ///     set the range from 0 to 2). If the axis `type` is *date*, it should be date
        ///     strings, like date data, though Date objects and unix milliseconds will
        ///     be accepted and converted to strings. If the axis `type` is *category*,
        ///     it should be numbers, using the scale where each category is assigned a
        ///     serial number from zero in the order it appears.
        /// </summary>
        [JsonPropertyName(@"range")]
        public IList<object> Range { get; set;} 

        /// <summary>
        ///     Determines whether or not this axis is zoom-able. If true, then zoom is
        ///     disabled.
        /// </summary>
        [JsonPropertyName(@"fixedrange")]
        public bool? FixedRange { get; set;} 

        /// <summary>
        ///     Gets or sets the CheaterType.
        /// </summary>
        [JsonPropertyName(@"cheatertype")]
        public CheaterTypeEnum? CheaterType { get; set;} 

        /// <summary>
        ///     Gets or sets the TickMode.
        /// </summary>
        [JsonPropertyName(@"tickmode")]
        public TickModeEnum? TickMode { get; set;} 

        /// <summary>
        ///     Specifies the maximum number of ticks for the particular axis. The actual
        ///     number of ticks will be chosen automatically to be less than or equal to
        ///     `nticks`. Has an effect only if `tickmode` is set to *auto*.
        /// </summary>
        [JsonPropertyName(@"nticks")]
        public int? NTicks { get; set;} 

        /// <summary>
        ///     Sets the values at which ticks on this axis appear. Only has an effect if
        ///     `tickmode` is set to *array*. Used with `ticktext`.
        /// </summary>
        [JsonPropertyName(@"tickvals")]
        public IList<object> TickVals { get; set;} 

        /// <summary>
        ///     Sets the text displayed at the ticks position via `tickvals`. Only has an
        ///     effect if `tickmode` is set to *array*. Used with `tickvals`.
        /// </summary>
        [JsonPropertyName(@"ticktext")]
        public IList<object> TickText { get; set;} 

        /// <summary>
        ///     Determines whether axis labels are drawn on the low side, the high side,
        ///     both, or neither side of the axis.
        /// </summary>
        [JsonPropertyName(@"showticklabels")]
        public ShowTickLabelsEnum? ShowTickLabels { get; set;} 

        /// <summary>
        ///     Sets the tick font.
        /// </summary>
        [JsonPropertyName(@"tickfont")]
        public TickFont TickFont { get; set;} 

        /// <summary>
        ///     Sets the angle of the tick labels with respect to the horizontal. For example,
        ///     a `tickangle` of -90 draws the tick labels vertically.
        /// </summary>
        [JsonPropertyName(@"tickangle")]
        public float? TickAngle { get; set;} 

        /// <summary>
        ///     Sets a tick label prefix.
        /// </summary>
        [JsonPropertyName(@"tickprefix")]
        public string TickPrefix { get; set;} 

        /// <summary>
        ///     If *all*, all tick labels are displayed with a prefix. If *first*, only
        ///     the first tick is displayed with a prefix. If *last*, only the last tick
        ///     is displayed with a suffix. If *none*, tick prefixes are hidden.
        /// </summary>
        [JsonPropertyName(@"showtickprefix")]
        public ShowTickPrefixEnum? ShowTickPrefix { get; set;} 

        /// <summary>
        ///     Sets a tick label suffix.
        /// </summary>
        [JsonPropertyName(@"ticksuffix")]
        public string TickSuffix { get; set;} 

        /// <summary>
        ///     Same as `showtickprefix` but for tick suffixes.
        /// </summary>
        [JsonPropertyName(@"showticksuffix")]
        public ShowTickSuffixEnum? ShowTickSuffix { get; set;} 

        /// <summary>
        ///     If *all*, all exponents are shown besides their significands. If *first*,
        ///     only the exponent of the first tick is shown. If *last*, only the exponent
        ///     of the last tick is shown. If *none*, no exponents appear.
        /// </summary>
        [JsonPropertyName(@"showexponent")]
        public ShowExponentEnum? ShowExponent { get; set;} 

        /// <summary>
        ///     Determines a formatting rule for the tick exponents. For example, consider
        ///     the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*,
        ///     1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*,
        ///     1G. If *B*, 1B.
        /// </summary>
        [JsonPropertyName(@"exponentformat")]
        public ExponentFormatEnum? ExponentFormat { get; set;} 

        /// <summary>
        ///     If "true", even 4-digit integers are separated
        /// </summary>
        [JsonPropertyName(@"separatethousands")]
        public bool? SeparateThousands { get; set;} 

        /// <summary>
        ///     Sets the tick label formatting rule using d3 formatting mini-languages which
        ///     are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
        ///     And for dates see:  We add one item to d3's date formatter: *%{n}f* for
        ///     fractional seconds with n digits. For example, *2016-10-13 09:15:23.456*
        ///     with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
        /// </summary>
        [JsonPropertyName(@"tickformat")]
        public string TickFormat { get; set;} 

        /// <summary>
        ///     Gets or sets the TickFormatStops.
        /// </summary>
        [JsonPropertyName(@"tickformatstops")]
        public IList<TickFormatStop> TickFormatStops { get; set;} 

        /// <summary>
        ///     Specifies the ordering logic for the case of categorical variables. By default,
        ///     plotly uses *trace*, which specifies the order that is present in the data
        ///     supplied. Set `categoryorder` to *category ascending* or *category descending*
        ///     if order should be determined by the alphanumerical order of the category
        ///     names. Set `categoryorder` to *array* to derive the ordering from the attribute
        ///     `categoryarray`. If a category is not found in the `categoryarray` array,
        ///     the sorting behavior for that attribute will be identical to the *trace*
        ///     mode. The unspecified categories will follow the categories in `categoryarray`.
        /// </summary>
        [JsonPropertyName(@"categoryorder")]
        public CategoryOrderEnum? CategoryOrder { get; set;} 

        /// <summary>
        ///     Sets the order in which categories on this axis appear. Only has an effect
        ///     if `categoryorder` is set to *array*. Used with `categoryorder`.
        /// </summary>
        [JsonPropertyName(@"categoryarray")]
        public IList<object> CategoryArray { get; set;} 

        /// <summary>
        ///     Extra padding between label and the axis
        /// </summary>
        [JsonPropertyName(@"labelpadding")]
        public int? LabelPadding { get; set;} 

        /// <summary>
        ///     Sets a axis label prefix.
        /// </summary>
        [JsonPropertyName(@"labelprefix")]
        public string LabelPrefix { get; set;} 

        /// <summary>
        ///     Sets a axis label suffix.
        /// </summary>
        [JsonPropertyName(@"labelsuffix")]
        public string LabelSuffix { get; set;} 

        /// <summary>
        ///     Determines whether or not a line bounding this axis is drawn.
        /// </summary>
        [JsonPropertyName(@"showline")]
        public bool? ShowLine { get; set;} 

        /// <summary>
        ///     Sets the axis line color.
        /// </summary>
        [JsonPropertyName(@"linecolor")]
        public object LineColor { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the axis line.
        /// </summary>
        [JsonPropertyName(@"linewidth")]
        public float? LineWidth { get; set;} 

        /// <summary>
        ///     Sets the axis line color.
        /// </summary>
        [JsonPropertyName(@"gridcolor")]
        public object GridColor { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the axis line.
        /// </summary>
        [JsonPropertyName(@"gridwidth")]
        public float? GridWidth { get; set;} 

        /// <summary>
        ///     Determines whether or not grid lines are drawn. If *true*, the grid lines
        ///     are drawn at every tick mark.
        /// </summary>
        [JsonPropertyName(@"showgrid")]
        public bool? ShowGrid { get; set;} 

        /// <summary>
        ///     Sets the number of minor grid ticks per major grid tick
        /// </summary>
        [JsonPropertyName(@"minorgridcount")]
        public int? MinorGridCount { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the grid lines.
        /// </summary>
        [JsonPropertyName(@"minorgridwidth")]
        public float? MinorGridWidth { get; set;} 

        /// <summary>
        ///     Sets the color of the grid lines.
        /// </summary>
        [JsonPropertyName(@"minorgridcolor")]
        public object MinorGridColor { get; set;} 

        /// <summary>
        ///     Determines whether or not a line is drawn at along the starting value of
        ///     this axis. If *true*, the start line is drawn on top of the grid lines.
        /// </summary>
        [JsonPropertyName(@"startline")]
        public bool? StartLine { get; set;} 

        /// <summary>
        ///     Sets the line color of the start line.
        /// </summary>
        [JsonPropertyName(@"startlinecolor")]
        public object StartLineColor { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the start line.
        /// </summary>
        [JsonPropertyName(@"startlinewidth")]
        public float? StartLineWidth { get; set;} 

        /// <summary>
        ///     Determines whether or not a line is drawn at along the final value of this
        ///     axis. If *true*, the end line is drawn on top of the grid lines.
        /// </summary>
        [JsonPropertyName(@"endline")]
        public bool? EndLine { get; set;} 

        /// <summary>
        ///     Sets the width (in px) of the end line.
        /// </summary>
        [JsonPropertyName(@"endlinewidth")]
        public float? EndlineWidth { get; set;} 

        /// <summary>
        ///     Sets the line color of the end line.
        /// </summary>
        [JsonPropertyName(@"endlinecolor")]
        public object EndlineColor { get; set;} 

        /// <summary>
        ///     The starting index of grid lines along the axis
        /// </summary>
        [JsonPropertyName(@"tick0")]
        public float? Tick0 { get; set;} 

        /// <summary>
        ///     The stride between grid lines along the axis
        /// </summary>
        [JsonPropertyName(@"dtick")]
        public float? DTick { get; set;} 

        /// <summary>
        ///     The starting index of grid lines along the axis
        /// </summary>
        [JsonPropertyName(@"arraytick0")]
        public int? ArrayTick0 { get; set;} 

        /// <summary>
        ///     The stride between grid lines along the axis
        /// </summary>
        [JsonPropertyName(@"arraydtick")]
        public int? ArrayDTick { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  tickvals .
        /// </summary>
        [JsonPropertyName(@"tickvalssrc")]
        public string TickValsSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  ticktext .
        /// </summary>
        [JsonPropertyName(@"ticktextsrc")]
        public string TickTextSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  categoryarray .
        /// </summary>
        [JsonPropertyName(@"categoryarraysrc")]
        public string CategoryArraySrc { get; set;} 

    }
}