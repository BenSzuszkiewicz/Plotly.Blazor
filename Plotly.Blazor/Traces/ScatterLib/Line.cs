/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;

namespace Plotly.Blazor.Traces.ScatterLib
{
    /// <summary>
    ///     The Line class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Line 
    {
        /// <summary>
        ///     Sets the line color.
        /// </summary>
        [JsonPropertyName(@"color")]
        public object Color { get; set;} 

        /// <summary>
        ///     Sets the line width (in px).
        /// </summary>
        [JsonPropertyName(@"width")]
        public float? Width { get; set;} 

        /// <summary>
        ///     Determines the line shape. With <c>spline</c> the lines are drawn using
        ///     spline interpolation. The other available values correspond to step-wise
        ///     line shapes.
        /// </summary>
        [JsonPropertyName(@"shape")]
        public Plotly.Blazor.Traces.ScatterLib.LineLib.ShapeEnum? Shape { get; set;} 

        /// <summary>
        ///     Has an effect only if <c>shape</c> is set to <c>spline</c> Sets the amount
        ///     of smoothing. <c>0</c> corresponds to no smoothing (equivalent to a <c>linear</c>
        ///     shape).
        /// </summary>
        [JsonPropertyName(@"smoothing")]
        public float? Smoothing { get; set;} 

        /// <summary>
        ///     Sets the dash style of lines. Set to a dash type string (<c>solid</c>, <c>dot</c>,
        ///     <c>dash</c>, <c>longdash</c>, <c>dashdot</c>, or <c>longdashdot</c>) or
        ///     a dash length list in px (eg <c>5px,10px,2px,2px</c>).
        /// </summary>
        [JsonPropertyName(@"dash")]
        public string Dash { get; set;} 

        /// <summary>
        ///     Simplifies lines by removing nearly-collinear points. When transitioning
        ///     lines, it may be desirable to disable this so that the number of points
        ///     along the resulting SVG path is unaffected.
        /// </summary>
        [JsonPropertyName(@"simplify")]
        public bool? Simplify { get; set;} 

    }
}