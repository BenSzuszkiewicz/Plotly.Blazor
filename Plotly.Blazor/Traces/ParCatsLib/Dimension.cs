/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Traces.ParCatsLib.DimensionLib;

namespace Plotly.Blazor.Traces.ParCatsLib
{
    /// <summary>
    ///     The Dimension class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Dimension 
    {
        /// <summary>
        ///     The shown name of the dimension.
        /// </summary>
        [JsonPropertyName(@"label")]
        public string Label { get; set;} 

        /// <summary>
        ///     Specifies the ordering logic for the categories in the dimension. By default,
        ///     plotly uses *trace*, which specifies the order that is present in the data
        ///     supplied. Set `categoryorder` to *category ascending* or *category descending*
        ///     if order should be determined by the alphanumerical order of the category
        ///     names. Set `categoryorder` to *array* to derive the ordering from the attribute
        ///     `categoryarray`. If a category is not found in the `categoryarray` array,
        ///     the sorting behavior for that attribute will be identical to the *trace*
        ///     mode. The unspecified categories will follow the categories in `categoryarray`.
        /// </summary>
        [JsonPropertyName(@"categoryorder")]
        public CategoryOrderEnum? CategoryOrder { get; set;} 

        /// <summary>
        ///     Sets the order in which categories in this dimension appear. Only has an
        ///     effect if `categoryorder` is set to *array*. Used with `categoryorder`.
        /// </summary>
        [JsonPropertyName(@"categoryarray")]
        public IList<object> CategoryArray { get; set;} 

        /// <summary>
        ///     Sets alternative tick labels for the categories in this dimension. Only
        ///     has an effect if `categoryorder` is set to *array*. Should be an array the
        ///     same length as `categoryarray` Used with `categoryorder`.
        /// </summary>
        [JsonPropertyName(@"ticktext")]
        public IList<object> TickText { get; set;} 

        /// <summary>
        ///     Dimension values. `values[n]` represents the category value of the `n`th
        ///     point in the dataset, therefore the `values` vector for all dimensions must
        ///     be the same (longer vectors will be truncated).
        /// </summary>
        [JsonPropertyName(@"values")]
        public IList<object> Values { get; set;} 

        /// <summary>
        ///     The display index of dimension, from left to right, zero indexed, defaults
        ///     to dimension index.
        /// </summary>
        [JsonPropertyName(@"displayindex")]
        public int? DisplayIndex { get; set;} 

        /// <summary>
        ///     Shows the dimension when set to `true` (the default). Hides the dimension
        ///     for `false`.
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  categoryarray .
        /// </summary>
        [JsonPropertyName(@"categoryarraysrc")]
        public string CategoryArraySrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  ticktext .
        /// </summary>
        [JsonPropertyName(@"ticktextsrc")]
        public string TickTextSrc { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  values .
        /// </summary>
        [JsonPropertyName(@"valuessrc")]
        public string ValuesSrc { get; set;} 

    }
}