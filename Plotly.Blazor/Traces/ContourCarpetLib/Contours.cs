/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Traces.ContourCarpetLib.ContoursLib;

namespace Plotly.Blazor.Traces.ContourCarpetLib
{
    /// <summary>
    ///     The Contours class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Contours 
    {
        /// <summary>
        ///     If `levels`, the data is represented as a contour plot with multiple levels
        ///     displayed. If `constraint`, the data is represented as constraints with
        ///     the invalid region shaded as specified by the `operation` and `value` parameters.
        /// </summary>
        [JsonPropertyName(@"type")]
        public Plotly.Blazor.Traces.ContourCarpetLib.ContoursLib.TypeEnum? Type { get; set;} 

        /// <summary>
        ///     Sets the starting contour level value. Must be less than `contours.end`
        /// </summary>
        [JsonPropertyName(@"start")]
        public float? Start { get; set;} 

        /// <summary>
        ///     Sets the end contour level value. Must be more than `contours.start`
        /// </summary>
        [JsonPropertyName(@"end")]
        public float? End { get; set;} 

        /// <summary>
        ///     Sets the step between each contour level. Must be positive.
        /// </summary>
        [JsonPropertyName(@"size")]
        public float? Size { get; set;} 

        /// <summary>
        ///     Determines the coloring method showing the contour values. If *fill*, coloring
        ///     is done evenly between each contour level If *lines*, coloring is done on
        ///     the contour lines. If *none*, no coloring is applied on this trace.
        /// </summary>
        [JsonPropertyName(@"coloring")]
        public Plotly.Blazor.Traces.ContourCarpetLib.ContoursLib.ColoringEnum? Coloring { get; set;} 

        /// <summary>
        ///     Determines whether or not the contour lines are drawn. Has an effect only
        ///     if `contours.coloring` is set to *fill*.
        /// </summary>
        [JsonPropertyName(@"showlines")]
        public bool? ShowLines { get; set;} 

        /// <summary>
        ///     Determines whether to label the contour lines with their values.
        /// </summary>
        [JsonPropertyName(@"showlabels")]
        public bool? ShowLabels { get; set;} 

        /// <summary>
        ///     Sets the font used for labeling the contour levels. The default color comes
        ///     from the lines, if shown. The default family and size come from `layout.font`.
        /// </summary>
        [JsonPropertyName(@"labelfont")]
        public Plotly.Blazor.Traces.ContourCarpetLib.ContoursLib.LabelFont LabelFont { get; set;} 

        /// <summary>
        ///     Sets the contour label formatting rule using d3 formatting mini-language
        ///     which is very similar to Python, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
        /// </summary>
        [JsonPropertyName(@"labelformat")]
        public string LabelFormat { get; set;} 

        /// <summary>
        ///     Sets the constraint operation. *=* keeps regions equal to `value` *<* and
        ///     *<=* keep regions less than `value` *>* and *>=* keep regions greater than
        ///     `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]`
        ///     *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open
        ///     vs. closed intervals make no difference to constraint display, but all versions
        ///     are allowed for consistency with filter transforms.
        /// </summary>
        [JsonPropertyName(@"operation")]
        public Plotly.Blazor.Traces.ContourCarpetLib.ContoursLib.OperationEnum? Operation { get; set;} 

        /// <summary>
        ///     Sets the value or values of the constraint boundary. When `operation` is
        ///     set to one of the comparison values (=,<,>=,>,<=) *value* is expected to
        ///     be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[)
        ///     *value* is expected to be an array of two numbers where the first is the
        ///     lower bound and the second is the upper bound.
        /// </summary>
        [JsonPropertyName(@"value")]
        public object Value { get; set;} 

    }
}