/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Traces.TreeMapLib.TilingLib;

namespace Plotly.Blazor.Traces.TreeMapLib
{
    /// <summary>
    ///     The Tiling class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Tiling 
    {
        /// <summary>
        ///     Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling
        /// </summary>
        [JsonPropertyName(@"packing")]
        public PackingEnum? Packing { get; set;} 

        /// <summary>
        ///     When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio
        ///     this option specifies the desired aspect ratio of the generated rectangles.
        ///     The ratio must be specified as a number greater than or equal to one. Note
        ///     that the orientation of the generated rectangles (tall or wide) is not implied
        ///     by the ratio; for example, a ratio of two will attempt to produce a mixture
        ///     of rectangles whose width:height ratio is either 2:1 or 1:2. When using
        ///     *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly
        ///     applies 1 to increase squares in treemap layouts.
        /// </summary>
        [JsonPropertyName(@"squarifyratio")]
        public float? SquarifyRatio { get; set;} 

        /// <summary>
        ///     Determines if the positions obtained from solver are flipped on each axis.
        /// </summary>
        [JsonPropertyName(@"flip")]
        public FlipFlag? Flip { get; set;} 

        /// <summary>
        ///     Sets the inner padding (in px).
        /// </summary>
        [JsonPropertyName(@"pad")]
        public float? Pad { get; set;} 

    }
}