/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Transforms.FilterLib;

namespace Plotly.Blazor.Transforms
{
    /// <summary>
    ///     The Filter class.
    ///     Implements the <see cref="ITransform" />
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class Filter : ITransform
    {
        /// <inheritdoc/>
        [JsonPropertyName(@"type")]
        public TransformTypeEnum Type { get; } = TransformTypeEnum.Filter;

        /// <summary>
        ///     Determines whether this filter transform is enabled or disabled.
        /// </summary>
        [JsonPropertyName(@"enabled")]
        public bool? Enabled { get; set;} 

        /// <summary>
        ///     Sets the filter target by which the filter is applied. If a string, `target`
        ///     is assumed to be a reference to a data array in the parent trace object.
        ///     To filter about nested variables, use *.* to access them. For example, set
        ///     `target` to *marker.color* to filter about the marker color array. If an
        ///     array, `target` is then the data array by which the filter is applied.
        /// </summary>
        [JsonPropertyName(@"target")]
        public string Target { get; set;} 

        /// <summary>
        ///     Sets the filter operation. *=* keeps items equal to `value` *!=* keeps items
        ///     not equal to `value` *<* keeps items less than `value` *<=* keeps items
        ///     less than or equal to `value` *>* keeps items greater than `value` *>=*
        ///     keeps items greater than or equal to `value` *[]* keeps items inside `value[0]`
        ///     to `value[1]` including both bounds *()* keeps items inside `value[0]` to
        ///     `value[1]` excluding both bounds *[)* keeps items inside `value[0]` to `value[1]`
        ///     including `value[0]` but excluding `value[1] *(]* keeps items inside `value[0]`
        ///     to `value[1]` excluding `value[0]` but including `value[1] *][* keeps items
        ///     outside `value[0]` to `value[1]` and equal to both bounds *)(* keeps items
        ///     outside `value[0]` to `value[1]` *](* keeps items outside `value[0]` to
        ///     `value[1]` and equal to `value[0]` *)[* keeps items outside `value[0]` to
        ///     `value[1]` and equal to `value[1]` *{}* keeps items present in a set of
        ///     values *}{* keeps items not present in a set of values
        /// </summary>
        [JsonPropertyName(@"operation")]
        public OperationEnum? Operation { get; set;} 

        /// <summary>
        ///     Sets the value or values by which to filter. Values are expected to be in
        ///     the same type as the data linked to `target`. When `operation` is set to
        ///     one of the comparison values (=,!=,<,>=,>,<=) `value` is expected to be
        ///     a number or a string. When `operation` is set to one of the interval values
        ///     ([],(),[),(],][,)(,](,)[) `value` is expected to be 2-item array where the
        ///     first item is the lower bound and the second item is the upper bound. When
        ///     `operation`, is set to one of the set values ({},}{) `value` is expected
        ///     to be an array with as many items as the desired set elements.
        /// </summary>
        [JsonPropertyName(@"value")]
        public object Value { get; set;} 

        /// <summary>
        ///     Determines whether or not gaps in data arrays produced by the filter operation
        ///     are preserved. Setting this to *true* might be useful when plotting a line
        ///     chart with `connectgaps` set to *false*.
        /// </summary>
        [JsonPropertyName(@"preservegaps")]
        public bool? PreserveGaps { get; set;} 

        /// <summary>
        ///     Sets the calendar system to use for `value`, if it is a date.
        /// </summary>
        [JsonPropertyName(@"valuecalendar")]
        public ValueCalendarEnum? ValueCalendar { get; set;} 

        /// <summary>
        ///     Sets the calendar system to use for `target`, if it is an array of dates.
        ///     If `target` is a string (eg *x*) we use the corresponding trace attribute
        ///     (eg `xcalendar`) if it exists, even if `targetcalendar` is provided.
        /// </summary>
        [JsonPropertyName(@"targetcalendar")]
        public TargetCalendarEnum? TargetCalendar { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  target .
        /// </summary>
        [JsonPropertyName(@"targetsrc")]
        public string TargetSrc { get; set;} 

    }
}