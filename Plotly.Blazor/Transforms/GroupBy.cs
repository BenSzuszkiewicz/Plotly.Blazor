/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System.Text.Json.Serialization;
using System.Collections.Generic;
using Plotly.Blazor.Transforms.GroupByLib;

namespace Plotly.Blazor.Transforms
{
    /// <summary>
    ///     The GroupBy class.
    ///     Implements the <see cref="ITransform" />
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "1.0.0.0")]
    public class GroupBy : ITransform
    {
        /// <inheritdoc/>
        [JsonPropertyName(@"type")]
        public TransformTypeEnum Type { get; } = TransformTypeEnum.GroupBy;

        /// <summary>
        ///     Determines whether this group-by transform is enabled or disabled.
        /// </summary>
        [JsonPropertyName(@"enabled")]
        public bool? Enabled { get; set;} 

        /// <summary>
        ///     Sets the groups in which the trace data will be split. For example, with
        ///     `x` set to *[1, 2, 3, 4]* and `groups` set to *['a', 'b', 'a', 'b']*, the
        ///     groupby transform with split in one trace with `x` [1, 3] and one trace
        ///     with `x` [2, 4].
        /// </summary>
        [JsonPropertyName(@"groups")]
        public IList<object> Groups { get; set;} 

        /// <summary>
        ///     Pattern by which grouped traces are named. If only one trace is present,
        ///     defaults to the group name (`"%{group}"`), otherwise defaults to the group
        ///     name with trace name (`"%{group} (%{trace})"`). Available escape sequences
        ///     are `%{group}`, which inserts the group name, and `%{trace}`, which inserts
        ///     the trace name. If grouping GDP data by country when more than one trace
        ///     is present, for example, the default "%{group} (%{trace})" would return
        ///     "Monaco (GDP per capita)".
        /// </summary>
        [JsonPropertyName(@"nameformat")]
        public string NameFormat { get; set;} 

        /// <summary>
        ///     Gets or sets the Styles.
        /// </summary>
        [JsonPropertyName(@"styles")]
        public IList<Style> Styles { get; set;} 

        /// <summary>
        ///     Sets the source reference on Chart Studio Cloud for  groups .
        /// </summary>
        [JsonPropertyName(@"groupssrc")]
        public string GroupsSrc { get; set;} 

    }
}