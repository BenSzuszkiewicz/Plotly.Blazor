@page "/"
@using System.Diagnostics
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.YAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using Title = Plotly.Blazor.LayoutLib.YAxisLib.Title

<h1>Scatter Chart</h1>

<button type="button" class="btn btn-primary" @onclick="() => Clear()">Clear</button>
<button type="button" class="btn btn-primary" @onclick="() => AddData()">Add data</button>

<PlotlyChart Id="TestId" Config="config" Layout="layout" Data="data" @ref="chart" />

@code
{
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };
    Layout layout = new Layout
    {
        Title = new LayoutLib.Title()
        {
            Text = "Test"
        },
        YAxis = new List<YAxis>
{
            new YAxis
            {
                Title = new Title
                {
                    Text = "Scatter Unit"
                }
            }
        }
    };

    List<ITrace> data = new List<ITrace>
{
    new Scatter
    {
        Name = "ScatterTrace",
        Mode = ModeFlag.Lines | ModeFlag.Markers,
        X = new List<object>{1,2,3},
        Y = new List<object>{1,2,3}
    }
};

    private async Task AddData(int count = 100)
    {
        if (!(chart.Data.ElementAt(0) is Scatter scatter)) return;

        var (x, y) = Helper.GenerateData(scatter.X.Count + 1, scatter.X.Count + 1 + count);

        scatter.X.AddRange(x);
        scatter.Y.AddRange(y);

        var stopwatch = new Stopwatch();
        stopwatch.Start();
        await chart.Update();
        stopwatch.Stop();
        Console.WriteLine($"[PERF.] Update took {stopwatch.ElapsedMilliseconds}");
    }

    private async Task Clear()
    {
        if (!(chart.Data.ElementAt(0) is Scatter plot)) return;

        plot.X.Clear();
        plot.Y.Clear();

        await chart.Update();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AddData();
        }
    }
}